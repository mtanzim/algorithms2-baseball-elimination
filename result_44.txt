See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (1 warning)
PMD:          FAILED (6 warnings)
Checkstyle:   FAILED (0 errors, 9 warnings)

Correctness:  13/23 tests passed
Memory:       0/4 tests passed
Timing:       0/1 tests passed

Aggregate score: 43.91%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 11K Oct  4 15:39 BaseballElimination.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 BaseballElimination.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
BaseballElimination:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'BaseballElimination$Team' be refactored into a static nested class?  At BaseballElimination.java:[lines 29-56]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------
BaseballElimination.java:18: The private instance (or static) variable 'teamNames' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BaseballElimination.java:19: The private instance (or static) variable 'teams' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BaseballElimination.java:20: The private instance (or static) variable 'teamCount' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BaseballElimination.java:32: The user-supplied array 'matchup' is stored directly. [ArrayIsStoredDirectly]
BaseballElimination.java:50: A getX() method which returns a boolean should be named isX() [BooleanGetMethodName]
BaseballElimination.java:182: Avoid unused local variables, such as 'vsI'. [UnusedLocalVariable]
PMD ends with 6 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BaseballElimination.java:26:13: Do not use the letter 'l' as an instance variable name. It is hard to distinguish from the number '1'. [MemberName]
[WARN] BaseballElimination.java:32:40: Do not use the letter 'l' as a parameter variable name. It is hard to distinguish from the number '1'. [ParameterName]
[WARN] BaseballElimination.java:54:37: The local (or parameter) variable 'isElim' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] BaseballElimination.java:77:28: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BaseballElimination.java:154:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:168:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:173:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 7 warnings.

% custom checkstyle checks for BaseballElimination.java
*-----------------------------------------------------------
[WARN] BaseballElimination.java:78:30: The numeric literal '4' appears to be unnecessary. [NumericLiteral]
[WARN] BaseballElimination.java:79:33: The numeric literal '4' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of BaseballElimination
*-----------------------------------------------------------
Running 23 total tests.

Test 1: check numberOfTeams()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 2: check teams()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 3: check wins()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 4: check losses()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 5: check remaining()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 6: check against()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 7a: check isEliminated() when n = 4
  * teams4.txt
  * teams4a.txt
  * teams4b.txt
==> passed

Test 7b: check isEliminated() when n = 5
  * teams5.txt
  * teams5a.txt
  * teams5b.txt
  * teams5c.txt
==> passed

Test 7c: check isEliminated() when n = 6 to 19
  * teams7.txt
  * teams8.txt
  * teams10.txt
  * teams12.txt
  * teams12-allgames.txt
==> passed

Test 7d: check isEliminated() when n = 20 to 30
  * teams24.txt

    java.lang.IllegalArgumentException: vertex 26 is not between 0 and 25

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:133)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkIsEliminated(TestBaseballElimination.java:162)
    TestBaseballElimination.test7d(TestBaseballElimination.java:572)
    TestBaseballElimination.main(TestBaseballElimination.java:783)

  * teams29.txt

    java.lang.IllegalArgumentException: vertex 29 is not between 0 and 28

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:132)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkIsEliminated(TestBaseballElimination.java:162)
    TestBaseballElimination.test7d(TestBaseballElimination.java:573)
    TestBaseballElimination.main(TestBaseballElimination.java:783)

  * teams30.txt

    java.lang.IllegalArgumentException: vertex 32 is not between 0 and 31

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:133)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkIsEliminated(TestBaseballElimination.java:162)
    TestBaseballElimination.test7d(TestBaseballElimination.java:574)
    TestBaseballElimination.main(TestBaseballElimination.java:783)

==> FAILED

Test 7e: check isEliminated() when n = 30 to 50
  * teams32.txt

    java.lang.IllegalArgumentException: vertex 34 is not between 0 and 33

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:133)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkIsEliminated(TestBaseballElimination.java:162)
    TestBaseballElimination.test7e(TestBaseballElimination.java:579)
    TestBaseballElimination.main(TestBaseballElimination.java:786)

  * teams36.txt

    java.lang.ArithmeticException: / by zero

    BaseballElimination.nCr(BaseballElimination.java:134)
    BaseballElimination.isEliminated(BaseballElimination.java:174)
    TestBaseballElimination.checkIsEliminated(TestBaseballElimination.java:162)
    TestBaseballElimination.test7e(TestBaseballElimination.java:580)
    TestBaseballElimination.main(TestBaseballElimination.java:786)

  * teams42.txt

    java.lang.ArithmeticException: / by zero

    BaseballElimination.nCr(BaseballElimination.java:134)
    BaseballElimination.isEliminated(BaseballElimination.java:174)
    TestBaseballElimination.checkIsEliminated(TestBaseballElimination.java:162)
    TestBaseballElimination.test7e(TestBaseballElimination.java:581)
    TestBaseballElimination.main(TestBaseballElimination.java:786)

  * teams48.txt

    java.lang.ArithmeticException: / by zero

    BaseballElimination.nCr(BaseballElimination.java:134)
    BaseballElimination.isEliminated(BaseballElimination.java:174)
    TestBaseballElimination.checkIsEliminated(TestBaseballElimination.java:162)
    TestBaseballElimination.test7e(TestBaseballElimination.java:582)
    TestBaseballElimination.main(TestBaseballElimination.java:786)

==> FAILED

Test 8: check that isEliminated() is consistent with certificateOfElimination()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt

    java.lang.IllegalArgumentException: vertex 29 is not between 0 and 28

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:132)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkConsistent(TestBaseballElimination.java:210)
    TestBaseballElimination.test8(TestBaseballElimination.java:593)
    TestBaseballElimination.main(TestBaseballElimination.java:789)

  * teams48.txt

    java.lang.ArithmeticException: / by zero

    BaseballElimination.nCr(BaseballElimination.java:134)
    BaseballElimination.isEliminated(BaseballElimination.java:174)
    TestBaseballElimination.checkConsistent(TestBaseballElimination.java:210)
    TestBaseballElimination.test8(TestBaseballElimination.java:594)
    TestBaseballElimination.main(TestBaseballElimination.java:789)

==> FAILED

Test 9a: check certificateOfElimination() when n = 4
  * teams4.txt
  * teams4a.txt
  * teams4b.txt
    - invalid certificate of elimination for 'Hufflepuff'
    - student   certificate of elimination = { Gryffindor Ravenclaw Slytherin }
    - reference certificate of elimination = { Gryffindor }

==> FAILED

Test 9b: check certificateOfElimination() when n = 5
  * teams5.txt
  * teams5a.txt
  * teams5b.txt
  * teams5c.txt
==> passed

Test 9c: check certificateOfElimination() when n = 6 to 20
  * teams7.txt
  * teams8.txt
  * teams10.txt
  * teams12.txt
  * teams12-allgames.txt
    - invalid certificate of elimination for 'Team2'
    - student   certificate of elimination = { Team0 Team1 Team3 Team4 Team5 Team6 Team7 Team8 Team9 Team10 Team11 }
    - reference certificate of elimination = { Team4 }

==> FAILED

Test 9d: check certificateOfElimination() when n = 20 to 30
  * teams24.txt

    java.lang.IllegalArgumentException: vertex 26 is not between 0 and 25

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:133)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkCertificateOfElimination(TestBaseballElimination.java:239)
    TestBaseballElimination.test9d(TestBaseballElimination.java:626)
    TestBaseballElimination.main(TestBaseballElimination.java:801)

  * teams29.txt

    java.lang.IllegalArgumentException: vertex 29 is not between 0 and 28

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:132)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkCertificateOfElimination(TestBaseballElimination.java:239)
    TestBaseballElimination.test9d(TestBaseballElimination.java:627)
    TestBaseballElimination.main(TestBaseballElimination.java:801)

  * teams30.txt
    - invalid certificate of elimination for 'Team0'
    - student   certificate of elimination = { Team1 Team2 Team3 Team4 Team5 Team6 Team7 Team8 Team9 Team10 Team11 Team12 Team13 Team14 Team15 Team16 Team17 Team18 Team19 Team20 Team21 Team22 Team23 Team24 Team25 Team26 Team27 Team28 Team29 }
    - reference certificate of elimination = { Team16 }


    java.lang.IllegalArgumentException: vertex 32 is not between 0 and 31

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:133)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkCertificateOfElimination(TestBaseballElimination.java:239)
    TestBaseballElimination.test9d(TestBaseballElimination.java:628)
    TestBaseballElimination.main(TestBaseballElimination.java:801)

==> FAILED

Test 9e: check certificateOfElimination() when n = 30 to 50
  * teams32.txt

    java.lang.IllegalArgumentException: vertex 34 is not between 0 and 33

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:133)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkCertificateOfElimination(TestBaseballElimination.java:239)
    TestBaseballElimination.test9e(TestBaseballElimination.java:633)
    TestBaseballElimination.main(TestBaseballElimination.java:804)

  * teams36.txt

    java.lang.ArithmeticException: / by zero

    BaseballElimination.nCr(BaseballElimination.java:134)
    BaseballElimination.isEliminated(BaseballElimination.java:174)
    TestBaseballElimination.checkCertificateOfElimination(TestBaseballElimination.java:239)
    TestBaseballElimination.test9e(TestBaseballElimination.java:634)
    TestBaseballElimination.main(TestBaseballElimination.java:804)

  * teams42.txt

    java.lang.ArithmeticException: / by zero

    BaseballElimination.nCr(BaseballElimination.java:134)
    BaseballElimination.isEliminated(BaseballElimination.java:174)
    TestBaseballElimination.checkCertificateOfElimination(TestBaseballElimination.java:239)
    TestBaseballElimination.test9e(TestBaseballElimination.java:635)
    TestBaseballElimination.main(TestBaseballElimination.java:804)

  * teams48.txt

    java.lang.ArithmeticException: / by zero

    BaseballElimination.nCr(BaseballElimination.java:134)
    BaseballElimination.isEliminated(BaseballElimination.java:174)
    TestBaseballElimination.checkCertificateOfElimination(TestBaseballElimination.java:239)
    TestBaseballElimination.test9e(TestBaseballElimination.java:636)
    TestBaseballElimination.main(TestBaseballElimination.java:804)

==> FAILED

Test 10: check methods when n = 1
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
==> passed

Test 11: check immutability by calling certificateOfElimination() both before
         and after calling isEliminated() and verifying that the results match
  * teams4.txt
    - number of entries in student   solution: 2
    - number of entries in reference solution: 0
    - 2 extra entries in student solution, including:
      'New_York'

    - fails when checking the elimination status of 'Philadelphia'
    - reference solution = certificateOfElimination() before call to isEliminated()
    - student   solution = certificateOfElimination() after call to isEliminated()

  * teams5.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 0
    - 4 extra entries in student solution, including:
      'Toronto'

    - fails when checking the elimination status of 'Detroit'
    - reference solution = certificateOfElimination() before call to isEliminated()
    - student   solution = certificateOfElimination() after call to isEliminated()

  * teams29.txt

    java.lang.IllegalArgumentException: vertex 29 is not between 0 and 28

    edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
    edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:132)
    BaseballElimination.isEliminated(BaseballElimination.java:210)
    TestBaseballElimination.checkImmutable(TestBaseballElimination.java:316)
    TestBaseballElimination.test11(TestBaseballElimination.java:660)
    TestBaseballElimination.main(TestBaseballElimination.java:810)

==> FAILED

Test 12: check that certificateOfElimination() returns null for eliminated teams
  * teams4.txt
    - fails when checking the elimination status of 'Atlanta'
    - student   certificate of elimination = { }
    - reference certificate of elimination = null

  * teams5.txt
    - fails when checking the elimination status of 'New_York'
    - student   certificate of elimination = { }
    - reference certificate of elimination = null

==> FAILED

Test 13: check for invalid arguments
  * teams4.txt
    - java.lang.IllegalArgumentException not thrown for wins("Princeton")
    - java.lang.IllegalArgumentException not thrown for losses("Princeton")
    - java.lang.IllegalArgumentException not thrown for remaining("Princeton")
    - java.lang.IllegalArgumentException not thrown for isEliminated("Princeton")
    - java.lang.IllegalArgumentException not thrown for certificateOfElimination("Princeton")
    - java.lang.IllegalArgumentException not thrown for against("Princeton", "Tigers")
    - java.lang.IllegalArgumentException not thrown for against("Princeton", "New_York")
    - java.lang.IllegalArgumentException not thrown for against("New_York", "Princeton")
  * teams5.txt
    - java.lang.IllegalArgumentException not thrown for wins("Princeton")
    - java.lang.IllegalArgumentException not thrown for losses("Princeton")
    - java.lang.IllegalArgumentException not thrown for remaining("Princeton")
    - java.lang.IllegalArgumentException not thrown for isEliminated("Princeton")
    - java.lang.IllegalArgumentException not thrown for certificateOfElimination("Princeton")
    - java.lang.IllegalArgumentException not thrown for against("Princeton", "Tigers")
    - java.lang.IllegalArgumentException not thrown for against("Princeton", "New_York")
    - java.lang.IllegalArgumentException not thrown for against("New_York", "Princeton")
==> FAILED

Test 14: check for dependence on reference equality of strings
==> passed

Test 15: check that two Baseball objects can be created at the same time
  * teams4.txt and teams5.txt
  * teams5.txt and teams7.txt
==> passed


Total: 13/23 tests passed!


================================================================
********************************************************************************
*  TIMING
********************************************************************************

Timing BaseballElimination
*-----------------------------------------------------------
Running 1 total tests.

    n   constructor isEliminated() + certificateOfElimination()
----------------------------------------------------------------
   30       0.01Exception in thread "main" java.lang.IllegalArgumentException: vertex 32 is not between 0 and 31
	at edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
	at edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:133)
	at BaseballElimination.isEliminated(BaseballElimination.java:210)
	at TimeBaseballElimination.run(TimeBaseballElimination.java:33)
	at TimeBaseballElimination.main(TimeBaseballElimination.java:64)


Total: 0/1 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of BaseballElimination
*-----------------------------------------------------------
Running 4 total tests.

Exception in thread "main" java.lang.IllegalArgumentException: vertex 21 is not between 0 and 20
	at edu.princeton.cs.algs4.FlowNetwork.validateVertex(FlowNetwork.java:120)
	at edu.princeton.cs.algs4.FlowNetwork.addEdge(FlowNetwork.java:133)
	at BaseballElimination.isEliminated(BaseballElimination.java:210)
	at MemoryOfBaseballElimination.main(MemoryOfBaseballElimination.java:72)


Total: 0/4 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================